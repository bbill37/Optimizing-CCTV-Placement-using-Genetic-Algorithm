from PIL import Image, ImageDraw, ImageEnhance, ImageFilter, ImageOpsimport cv2import mathfrom matplotlib import pyplot as pltimport numpy as np# declarationcoords = []# read floor plan image -------------------------def read_image():	img = cv2.imread('art.png', 1)	return img# preprocess image -------------------------# obtain coordinate for polygon -------------------------def draw_rectangle(image,coords):	# get start_point from odd & end_point from even array		# img = cv2.imread('art.png', 1)	img = image	# print(coords[0]) # DONE	start_point = coords[0]	# print(coords[1]) # DONE	end_point = coords[1]	color = (0,0,255)	thickness = 2	img = cv2.rectangle(img, start_point, end_point, color, thickness)			return img# function to display the coordinates of# of the points clicked on the imagedef click_event(event, x, y, flags, params):	# checking for left mouse clicks	if event == cv2.EVENT_LBUTTONDOWN:		# displaying the coordinates		# on the Shell		print(x, ' ', y)		coords.append((int(x),int(y)))		# displaying the coordinates		# on the image window		font = cv2.FONT_HERSHEY_SIMPLEX		cv2.putText(img, str(x) + ',' +					str(y), (x,y), font,					0.5, (255, 0, 0), 2)		cv2.imshow('image', img)	# checking for right mouse clicks		if event==cv2.EVENT_RBUTTONDOWN:		# displaying the coordinates		# on the Shell		print(x, ' ', y)		coords.append((int(x),int(y)))		# displaying the coordinates		# on the image window		font = cv2.FONT_HERSHEY_SIMPLEX		b = img[y, x, 0]		g = img[y, x, 1]		r = img[y, x, 2]		cv2.putText(img, str(b) + ',' +					str(g) + ',' + str(r),					(x,y), font, 0.5,					(0, 0, 255), 2)		cv2.imshow('image', img)# define available area from polygon created -------------------------# initialize cctv number based on area? -------------------------# ------------------------------------------------------------------------------------------------------# driver functionif __name__=="__main__":	# reading the image	img = read_image()	image_path = "art.png"	# displaying the image	cv2.imshow('image', img)	# # setting mouse handler for the image	# # and calling the click_event() function	# cv2.setMouseCallback('image', click_event)	# displaying the image	cv2.imshow('image', img)	# setting mouse handler for the image	# and calling the click_event() function	cv2.setMouseCallback('image', click_event)	# cv2.waitKey(0)	# wait for a key to be pressed to exit	if cv2.waitKey(0) & 0xFF == ord('p'):		while len(coords) != 1:			img = draw_rectangle(img,coords)			del coords[0]			del coords[0]			if len(coords) == 0:				break	# cv2.waitKey(0)	# img = draw_rectangle(img,coords)	cv2.imwrite('after.png', img)